"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const event=require("codeceptjs").event,output=require("codeceptjs").output,Step=require("codeceptjs/lib/step"),commander_1=__importDefault(require("commander")),index_1=require("../telemetry/index"),util_1=require("../util");event.dispatcher.on(event.all.before,()=>{index_1.sendTelemetryEvent(index_1.EventCategory.HeliumFW,index_1.EventName.StartTest)}),event.dispatcher.on(event.multiple.before,()=>{index_1.sendTelemetryEvent(index_1.EventCategory.HeliumFW,index_1.EventName.StartTest)}),event.dispatcher.on(event.all.after,()=>{index_1.sendTelemetryEvent(index_1.EventCategory.HeliumFW,index_1.EventName.EndTest)}),event.dispatcher.on(event.multiple.after,()=>{index_1.sendTelemetryEvent(index_1.EventCategory.HeliumFW,index_1.EventName.EndTest)}),Step.prototype.toString=function(){return this.actor="gondola",`${this.prefix}${this.actor} ${this.humanize()} ${this.humanizeArgs()}${this.suffix}`};const oldPrint=output.print;output.print=e=>{if(0===e.indexOf("CodeceptJS v")){e=`Gondola v${util_1.getGondolaVersion()}`}oldPrint(e)},commander_1.default.usage("<command> [options]"),commander_1.default.version(`Gondola v${util_1.getGondolaVersion()}`),commander_1.default.command("init [path]").description("Creates dummy config in current dir or [path]").action(require("codeceptjs/lib/command/init")),commander_1.default.command("migrate [path]").description("Migrate json config to js config in current dir or [path]").action(require("codeceptjs/lib/command/configMigrate")),commander_1.default.command("shell [path]").alias("sh").description("Interactive shell").option("--verbose","output internal logging information").option("--profile [value]","configuration profile to be used").action(require("codeceptjs/lib/command/interactive")),commander_1.default.command("list [path]").alias("l").description("List all actions for I.").action(require("codeceptjs/lib/command/list")),commander_1.default.command("def [path]").description("Generates TypeScript definitions for all I actions.").option("-c, --config [file]","configuration file to be used").option("-o, --output [folder]","target folder to paste definitions").action(require("codeceptjs/lib/command/definitions")),commander_1.default.command("gherkin:init [path]").alias("bdd:init").description("Prepare CodeceptJS to run feature files.").option("-c, --config [file]","configuration file to be used").action(require("codeceptjs/lib/command/gherkin/init")),commander_1.default.command("gherkin:steps [path]").alias("bdd:steps").description("Prints all defined gherkin steps.").option("-c, --config [file]","configuration file to be used").action(require("codeceptjs/lib/command/gherkin/steps")),commander_1.default.command("gherkin:snippets [path]").alias("bdd:snippets").description("Generate step definitions from steps.").option("--dry-run","don't save snippets to file").option("-c, --config [file]","configuration file to be used").option("--feature [file]","feature files(s) to scan").option("--path [file]","file in which to place the new snippets").action(require("codeceptjs/lib/command/gherkin/snippets")),commander_1.default.command("generate:test [path]").alias("gt").description("Generates an empty test").action(require("codeceptjs/lib/command/generate").test),commander_1.default.command("generate:pageobject [path]").alias("gpo").description("Generates an empty page object").action(require("codeceptjs/lib/command/generate").pageObject),commander_1.default.command("generate:object [path]").alias("go").option("--type, -t [kind]","type of object to be created").description("Generates an empty support object (page/step/fragment)").action(require("codeceptjs/lib/command/generate").pageObject),commander_1.default.command("generate:helper [path]").alias("gh").description("Generates a new helper").action(require("codeceptjs/lib/command/generate").helper),commander_1.default.command("run [test]").description("Executes tests").option("--steps","show step-by-step execution").option("--debug","output additional information").option("--verbose","output internal logging information").option("-o, --override [value]","override current config options").option("--profile [value]","configuration profile to be used").option("-c, --config [file]","configuration file to be used").option("--features","run only *.feature files and skip tests").option("--tests","run only JS test files and skip features").option("-p, --plugins <k=v,k2=v2,...>","enable plugins, comma-separated").option("--colors","force enabling of colors").option("--no-colors","force disabling of colors").option("-G, --growl","enable growl notification support").option("-O, --reporter-options <k=v,k2=v2,...>","reporter-specific options").option("-R, --reporter <name>","specify the reporter to use").option("-S, --sort","sort test files").option("-b, --bail","bail after first test failure").option("-d, --debug","enable node's debugger, synonym for node --debug").option("-g, --grep <pattern>","only run tests matching <pattern>").option("-f, --fgrep <string>","only run tests containing <string>").option("-i, --invert","inverts --grep and --fgrep matches").option("--full-trace","display the full stack trace").option("--compilers <ext>:<module>,...","use the given module(s) to compile files").option("--debug-brk","enable node's debugger breaking on the first line").option("--inline-diffs","display actual/expected differences inline within each string").option("--no-exit","require a clean shutdown of the event loop: mocha will not call process.exit").option("--recursive","include sub directories").option("--trace","trace function calls").option("--child <string>","option for child processes").action(require("codeceptjs/lib/command/run")),commander_1.default.command("run-workers <workers>").description("Executes tests in workers").option("-c, --config [file]","configuration file to be used").option("-g, --grep <pattern>","only run tests matching <pattern>").option("-o, --override [value]","override current config options").option("--debug","output additional information").option("--verbose","output internal logging information").option("--features","run only *.feature files and skip tests").option("--tests","run only JS test files and skip features").option("--profile [value]","configuration profile to be used").option("-p, --plugins <k=v,k2=v2,...>","enable plugins, comma-separated").action(require("codeceptjs/lib/command/run-workers")),commander_1.default.command("run-multiple [suites...]").description("Executes tests multiple").option("-c, --config [file]","configuration file to be used").option("--profile [value]","configuration profile to be used").option("--all","run all suites").option("--features","run only *.feature files and skip tests").option("--tests","run only JS test files and skip features").option("-g, --grep <pattern>","only run tests matching <pattern>").option("-f, --fgrep <string>","only run tests containing <string>").option("-i, --invert","inverts --grep and --fgrep matches").option("--steps","show step-by-step execution").option("--verbose","output internal logging information").option("--debug","output additional information").option("-p, --plugins <k=v,k2=v2,...>","enable plugins, comma-separated").option("-o, --override [value]","override current config options").option("-O, --reporter-options <k=v,k2=v2,...>","reporter-specific options").option("-R, --reporter <name>","specify the reporter to use").option("--recursive","include sub directories").action(require("../command/run-multiple")),commander_1.default.command("dry-run [test]").description("Prints step-by-step scenario for a test without actually running it").option("-p, --plugins <k=v,k2=v2,...>","enable plugins, comma-separated").option("--bootstrap","enable bootstrap script for dry-run").option("-c, --config [file]","configuration file to be used").option("--all","run all suites").option("--features","run only *.feature files and skip tests").option("--tests","run only JS test files and skip features").option("-g, --grep <pattern>","only run tests matching <pattern>").option("-f, --fgrep <string>","only run tests containing <string>").option("-i, --invert","inverts --grep and --fgrep matches").option("--steps","show step-by-step execution").option("--verbose","output internal logging information").option("--debug","output additional information").action(require("codeceptjs/lib/command/dryRun")),commander_1.default.on("command:*",e=>{console.log(`\nUnknown command ${e}\n`),commander_1.default.outputHelp()}),process.argv.length<=2&&console.log("!!!Welcome to Gondola!!!");const argv=process.argv;if(argv.includes("-c")||argv.includes("--config")||(argv.push("-c"),argv.push("gondola.json")),(argv.includes("--reporter")||argv.includes("-R"))&&argv.includes("gondolareport")){const e="./node_modules/gondolajs/built/reporter/mocha-report-hook",t=argv.indexOf("gondolareport");argv[t]=e}commander_1.default.parse(process.argv);
//# sourceMappingURL=../../debug/lib/runner.js.map
