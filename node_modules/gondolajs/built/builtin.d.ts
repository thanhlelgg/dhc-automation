import { Client, RectReturn } from "webdriver";
import { Browser } from "webdriverio";
/**
 * define an element  locator format
 */
export interface ILocator {
    id?: string;
    tagName?: string;
    className?: string;
    xpath?: string;
    css?: string;
    name?: string;
    value?: string;
    frame?: string;
    android?: string | ILocator;
    ios?: string | ILocator;
}
/**
 * define an error info
 */
export interface IErrorInfo {
    testCaseName: string;
    testStepName: string;
    errorMessage: string;
}
/**
 * Set of actions supported by gondola
 */
export interface IGondola {
    /**
     * Tests for deep equality between the actual and expected parameters.
     * If objects are strictly equal, the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param actual actual value
     * @param expected expected value
     * @param message (optional) message will throw if the values are not strictly equal
     * @example
     * ```typescript
     *
     * let value = await gondola.getText("#elementId");
     * gondola.checkEqual(value, "Hello");
     * gondola.checkEqual(value, "Hi", "value should be 'Hi'");
     * ```
     */
    checkEqual<T>(actual: T, expected: T, message?: string): void;
    /**
     * Tests for deep strict inequality.
     * If objects are not strictly equal, the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param actual actual value
     * @param expected expected value
     * @param message (optional) message will throw if the values are strictly equal
     * @example
     * ```typescript
     *
     * let value = await gondola.getText("#elementId");
     * gondola.checkNotEqual(value, "Hello");
     * gondola.checkNotEqual(value, "Hi", "value should not equal 'Hi'");
     * ```
     */
    checkNotEqual<T>(actual: T, expected: T, message?: string): void;
    /**
     * Click on a link or a button, identified by a locator.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator.
     * @param {string} context (optional) element to search in CSS|XPath|Strict locator.
     * @example
     * ```typescript
     *
     * await gondola.click("#elementId"); //click on element with the id "elementId";
     * await gondola.click("Login"); //click on button or link containing "Login";
     * await gondola.click({name : "submit"}, "#user>form");
     * ```
     */
    click(element: string | ILocator, context?: string): void;
    /**
     * Click on the active JavaScript native popup window, created by window.alert|window.confirm|window.prompt.
     * @param {string} option Click options:
     * + "ok": click on the accept button of the popup
     * + "cancel": click on the cancel button of the popup
     * @example
     * ```typescript
     *
     * gondola.clickPopup("ok");
     * ```
     */
    clickPopup(option: string): void;
    /**
     * Close the current tab
     * @example
     * ```typescript
     *
     * gondola.closeCurrentTab();
     * ```
     */
    closeCurrentTab(): void;
    /**
     * Close all tabs except for the current one.
     * @example
     * ```typescript
     *
     * gondola.closeOtherTabs();
     * ```
     */
    closeOtherTabs(): void;
    /**
     * Check if a control exists.
     * If the control is found, the verify point is considered: Passed; otherwise the test is: Failed.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @example
     * ```typescript
     *
     *  // check if a control with id "elementId" exists .
     * await gondola.checkControlExist("#elementId");
     *
     *  // check if a control containing "Login" exists.
     * await gondola.checkControlExist("Login");
     *
     *  // check if control that has the attribute "name=submit" exists.
     * await gondola.checkControlExist({name: "submit"});
     * ```
     */
    checkControlExist(element: string | ILocator): void;
    /**
     * Check if a control does not exists.
     * If the specified control is not found,
     * the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @example
     * ```typescript
     *
     * // check if a control with the id "elementId" does not exists .
     * await gondola.checkControlNotExist("#elementId");
     *
     * // check if a control containing "Login" does not exists.
     * await gondola.checkControlNotExist("Login");
     *
     * // check if a control that has attribute "name=submit"  does not exists.
     * await gondola.checkControlNotExist({name : "submit"});
     * ```
     */
    checkControlNotExist(element: string | ILocator): void;
    /**
     * Check if the first element with given locator has an attribute whose value matches the provided one.
     * The verify point is considered: Passed if the values match; otherwise the test result is: Failed.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @param {string} attribute Element's attribute to be retrieved.
     * @param {string} value Expected value of the attribute.
     * @example
     * ```typescript
     *
     * // Compare the value of attribute "name" from a control with id "buttonId1" against an expected value.
     * await gondola.checkControlProperty("#buttonId1","name","Button 1");
     * ```
     */
    checkControlProperty(element: string | ILocator, attribute: string, value: string): void;
    /**
     * Checks that the title of a window/page is equal to the provided one.
     * The verify point is considered: Passed if the values match; otherwise the test result is: Failed.
     * @param {string} title The title attribute of the current document.
     * @example
     * ```typescript
     *
     * // Check for the existence of a window whose title is "Scrum Board"
     * await gondola.checkWindowExist("Scrum Board");
     * ```
     */
    checkWindowExist(title: string): void;
    /**
     * Returns the number of visible elements in the control found with the supplied locator.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @example
     * ```typescript
     *
     * // Get visible elements in control with id "buttonId1"
     * await gondola.getElementCount("#buttonId1");
     * ```
     */
    getElementCount(element: string | ILocator): Promise<number>;
    /**
     * Retrieve text from the specified element.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @example
     * ```typescript
     *
     * // Get the text from control with xpath.
     * await gondola.getText({"xpath":"//input[@name='button_ControlTest']"});
     * ```
     */
    getText(element: string | ILocator): Promise<string>;
    /**
     * Check if text from the located element matches a given value.
     * The verify point is considered: Passed if the values match; otherwise the test result is: Failed.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @example
     * ```typescript
     *
     * // Compare the text from a control located by an xpath with an expected value.
     * await gondola.checkText({"xpath":"//input[@name='button_ControlTest']"},"ButtonTest");
     * ```
     */
    checkText(element: string | ILocator, value: string): void;
    /**
     * Clears all cookies. If a specific cookie is specified, it only deletes that cookie.
     * @param {string} cookie (optional) cookie name.
     * @example
     * ```typescript
     *
     * gondola.deleteCookie();
     * gondola.deleteCookie("test");
     * ```
     */
    deleteCookie(cookie?: string): void;
    /**
     * Returns a Boolean value to indicate whether or not the specified control is found.
     * Returns a Boolean value of ``true`` if the control is found. Otherwise it returns ``false``.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @example
     * ```typescript
     *
     * // Returns `true` if the control with id "button_ControlTest" exists.
     * let variable = await gondola.doesControlExist("#button_ControlTest");
     * ```
     */
    doesControlExist(element: string | ILocator): Promise<boolean>;
    /**
     * Fills a text field or textarea with the given string. If there is already text, it will be cleared first.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator.
     * @param {string} Value to be entered.
     * @example
     * ```typescript
     *
     * await gondola.enter({"xpath":"//input[@name='textBox_ControlTest']"},"This is example");
     * ```
     */
    enter(element: string | ILocator, value: string): void;
    /**
     * Executes a sync script on a page. Pass arguments to the function as additional parameters.
     * Returns the results. To receive the results you should use an ```async``` function
     * and ```await``.
     * @param {Function} function function to be executed in browser context.
     * @example
     * ```typescript
     *
     * await gondola.executeScript(function () {
     *      const element = document.getElementById('elementId');
     * });
     * ```
     */
    executeScript(fn: Function): Promise<any>;
    /**
     * Retrieves a value from the located element and returns a string.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator.
     * @example
     * ```typescript
     *
     * let value = await gondola.get("#buttonId");
     * ```
     */
    get(element: string | ILocator): Promise<string>;
    /**
     * Retrieves a attribute from the first element with a specified locator.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator.
     * @param {string} attribute attribute name.
     * @example
     * ```typescript
     *
     * let hrefValue = await gondola.getControlProperty("//a[.='Home']", "href");
     * ```
     */
    getControlProperty(element: string | ILocator, attribute: string): Promise<string>;
    /**
     * Retrieves an attribute from each of the located elements.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator.
     * @param {string[]} attribute attribute name.
     * @example
     * ```typescript
     *
     * let value = await gondola.getElementsAttribute("#buttonId", "value");
     * ```
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    getElementsAttribute(element: string | ILocator, attribute: string): Promise<string[]>;
    /**
     * Get selected items in list box or combo box defined by the HTML &#60;select&#62; tag.
     * @param {string|ILocator} selectLocator located by label|name|CSS|XPath|strict locator
     * @returns {[string]} text values of selected items.
     * @example
     * ```typescript
     *
     * const item = await gondola.getSelectedItems("#selectElementId");
     * ```
     */
    getSelectedItems(selectLocator: string | ILocator): Promise<string[]>;
    /**
     * Get the text from a popup,created by window.alert|window.confirm|window.prompt.
     * If no popup is visible, it returns null.
     * @example
     * ```typescript
     *
     * let text = await gondola.getPopupText();
     * ```
     */
    getPopupText(): Promise<string>;
    /**
     * Opens a web page in a browser.
     * Requires a relative or absolute url.
     * If url starts with /, it opens a web page of a site defined by the url config parameter.
     * @param {string} url url path or global url.
     * @example
     * ```typescript
     *
     * gondola.navigate("http://google.com");
     * ```
     */
    navigate(url: string): void;
    /**
     * Maximize the current window.
     * @example
     * ```typescript
     *
     * gondola.maximize();
     * ```
     */
    maximize(): void;
    /**
     * Open a new tab and switch to it.
     * @example
     * ```typescript
     *
     * gondola.openNewTab();
     * ```
     */
    openNewTab(): void;
    /**
     * Reloads the current page.
     * @example
     * ```typescript
     *
     * gondola.refresh();
     * ```
     */
    refresh(): void;
    /**
     * Create a report using using the the reporter set in gondola.json.
     * @param {string} description user-defined text or a caption of the image to put in the report.
     * @param {string} imagepath (optional) path to the image to put in the report.
     * @example
     * ```typescript
     *
     * gondola.report("This is a report")
     * ```
     */
    report(description: string, imagepath?: string): void;
    /**
     * Saves a screenshot to the output folder (set in gondola.json).
     * @param fileName file name to save.
     * @param fullPage (optional) flag to enable fullscreen screenshot mode.
     * @example
     * ```typescript
     *
     * await gondola.saveScreenshot("screenshot.png");
     * await gondola.saveScreenshot("screenshotFullPage.png", true);
     * ```
     */
    saveScreenshot(fileName: string, fullPage?: boolean): void;
    /**
     * Select items in a list box or a combo box that are defined by the HTML &#60;select&#62; tag.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @param {string|[string]} items text value of items will be selected
     * @example
     * ```typescript
     *
     * gondola.select("#selectElementId", ["Green", "Red"]);
     * ```
     */
    select(element: string | ILocator, items: string | string[]): void;
    /**
     * Callback the [callback] when an error happens.
     * @param {Function} callback function to be executed upon the occurrence of an error.
     * @example
     * ```typescript
     *
     * gondola.setErrorHandler(async (errorInfo: IErrorInfo, actor: any) => {
     *      gondola.report(`Testcase: ${errorInfo.testCaseName} \
     * failed at step: ${errorInfo.testStepName} with error: ${errorInfo.errorMessage}`);
     * });
     * ```
     */
    setErrorHandler(callback: (errorInfo: IErrorInfo, actor: any) => void): void;
    /**
     * Set the text in javascript prompt popup.
     * @param {string} value text use to set
     * @example
     * ```typescript
     *
     * gondola.setPopupText("I am testing popup");
     * ```
     */
    setPopupText(value: string): void;
    /**
     * Set state for the specified checkbox/radio button.
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator
     * @param {boolean} value state to which to set the checkbox/radio\
     * Allowable values:
     * + true: check the checkbox/radio
     * + false: un-check the checkbox/radio
     * @example
     * ```typescript
     *
     * // set State = true for the element "checkboxId"
     * gondola.setState("#checkboxId", true);
     * ```
     */
    setState(element: string | ILocator, value: boolean): void;
    /**
     * Switches frames. In the case of null a locator it reverts to the parent.
     * @param element located by CSS|XPath|strict locator.
     * @example
     * ```typescript
     *
     * gondola.switchFrame("//iframe[@src='https://paciellogroup.com']");
     * ```
     */
    switchFrame(element: string | ILocator): void;
    /**
     * Switches focus to a particular tab using its number. It waits for all tabs to load before switching.
     * @param option "previous" | "next" indicate prev or next tab will be switch
     * @param num (optional, default 1) offset from current handle index in sequence window handle.
     * @example
     * ```typescript
     *
     * gondola.switchBrowserTab("next");
     * ```
     */
    switchBrowserTab(option: string, num?: number): void;
    /**
     * Pauses execution for a number of seconds.
     * @param sec time in seconds to wait.
     * @example
     * ```typescript
     *
     * gondola.wait(5);
     * ```
     */
    wait(sec: number): void;
    /**
     * Waits for an element to be present on the page (the default amount is 1 second).
     * @param {string|ILocator} element located by its label|name|CSS|XPath|strict locator
     * @param {number} sec (optional) time in seconds to wait
     * @example
     * ```typescript
     *
     * // Wait 5 seconds for an element with the id "#buttonTest" to be present on the page.
     * gondola.waitForElement("#buttonTest", 5);
     * ```
     */
    waitForElement(element: string | ILocator, sec?: number): void;
    /**
     * Waits for an element to be removed from the DOM tree of a page (the default amount is  1 second).
     * @param locator element located by its CSS|XPath|strict locator.
     * @param sec (optional) time in seconds to wait, 1 by default.
     * @example
     * ```typescript
     *
     * gondola.waitForDisappear("#buttonTest", 5);
     * ```
     */
    waitForDisappear(locator: string | ILocator, sec?: number): void;
    /**
     * Get a JSON value using its JSON path.
     * @param jsonObject
     * @param jsonPath
     * @example
     * ```typescript
     *
     * const data = [
     *  {
     *    id: 1,
     *    title: "This is title 1"
     *  },
     *  {
     *    id: 2,
     *    title: "This is title 2",
     *  }
     * ];
     *
     * const value = await gondola.getJSONValue(data, "[0].title");
     * ```
     */
    getJSONValue(jsonObject: any, jsonPath: string): any;
    /**
     * Check a JSON value using its JSON path.
     * If they satisfy deep, strict equality,
     * the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param jsonObject
     * @param jsonPath
     * @param expected
     * @example
     * ```typescript
     *
     * const data = [
     *  {
     *    id: 1,
     *    title: "This is title 1"
     *  },
     *  {
     *    id: 2,
     *    title: "This is title 2",
     *  }
     * ];
     *
     * const value = await gondola.checkJSONValue(data, "[0].title", "This is title 1");
     * ```
     */
    checkJSONValue(jsonObject: any, jsonPath: string, expected: any): void;
}
/**
 * set of Appium extended actions supported by Gondola
 */
export interface IGondolaMobile {
    /**
     * Taps on a mobile element.
     * @param {string | ILocator} element located by accessible id, xpath,... locator
     * @example
     * ```typescript
     *
     * gondola.tap("~accessibleId");
     * gondola.tap({id: "buttonId"});
     * gondola.tap({
     *      android: "//com.android.TextView[@text='myLabel']",
     *      ios: "~myId"
     * });
     * ```
     */
    tap(element: string | ILocator): void;
    /**
     * Runs the given function when testing on Android.
     *
     * Note: When using the capabilities option, your option must be
     * declared in the gondola config file for it to work.
     * @param options capabilities use to filter
     * @param function callback function will be executed
     * @example
     * ```typescript
     *
     * gondola.runOnAndroid(async () => {
     *      await gondola.tap("~accessibleId");
     *      // ...
     * });
     *
     * // Filter can be applied by checking for capabilities. This code only run on Android 7.0
     * gondola.runOnAndroid({platformVersion: '7.0'}, () =>{
     *      // ...
     * });
     *
     * // Capabilities can be checked by a function. In this case , code will be executed only on android >= 6
     * gondola.runOnAndroid((cap) => {return cap.platformVersion >= 6}, ()=>{
     *      // ...
     * });
     * ```
     */
    runOnAndroid(options?: any, Function?: Function): void;
    /**
     * Runs the given function when testing on iOS.
     *
     * Note: if you're using Appium's Desired Capabilities, you must have the
     * options set in ```gondola.json`` under the helpers->Appium->desiredCapabilities section.
     * @param options capabilities use to filter
     * @param Function callback function will be executed
     * @example
     * ```typescript
     *
     * gondola.runOnIOS(async () => {
     *      await gondola.tap("~accessibleId");
     *      // ...
     * });
     *
     * // Filter can be applied by checking for capabilities. This code only run on runOnIOS 6.0
     * gondola.runOnIOS({platformVersion: '6.0'}, () => {
     *      // ...
     * });
     *
     * // Capabilities can be checked by a function. In this case , code will be executed only on runOnIOS >= 6
     * gondola.runOnIOS((cap) => {return cap.platformVersion >= 6}, () => {
     *      // ...
     * });
     * ```
     */
    runOnIOS(options?: any, Function?: Function): void;
    /**
     * Checks if the specified app is installed.
     * If the specified app is installed,
     * the verify point is considered: Passed; otherwise the test result is: Failed.
     * @param appPackageId app package name
     * @example
     * ```typescript
     *
     * gondola.checkAppIsInstalled("com.example.appName);
     * ```
     */
    checkAppIsInstalled(appPackageId: string): void;
    /**
     * Run subsequent actions on a specific device.
     * To run actions in parallel on all devices, use {@link runOnAllDevices}.
     *
     * **LIMITATION:** Currently, the user must wait for all currently running actions be completed
     * before switching devices.
     * @param deviceName the device name in multiremote configuration
     * @experimental v1
     * &#62; an be changed or removed soon
     */
    switchDevice(deviceName: string): void;
    /**
     * Run all subsequent actions in parallel.
     *
     * **LIMITATION:** Currently, the user must wait for all currently running actions be completed
     * before switching devices.
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    runOnAllDevices(): void;
    /**
     * Gets the WebDriver browser.
     * @example
     * ```typescript
     *
     * const browser = await gondola.getCurrentBrowser();
     * const element = await browser.findElement("accessibility id", "exampleId");
     * * ```
     */
    getCurrentBrowser(): Promise<Client & Browser>;
    /**
     * Gets the current desired capabilities.
     * @example
     * ```typescript
     *
     * const capabilities = await gondola.getCapabilities();
     * if (capabilities.platformName === "android"){
     *      // Do something
     * }
     * * ```
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    getCapabilities(): Promise<any>;
    /**
     * Sends a key event to the device.
     * @param {string | number} keyValue Device specific key value
     *
     * List of keys: https://developer.android.com/reference/android/view/KeyEvent.html
     * LIMITATION: only supports Android
     * @example
     * ```typescript
     *
     * gondola.sendDeviceKeyEvent(3);
     * ```
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendDeviceKeyEvent(keyValue: string | number): void;
    /**
     * Retrieves an element's boundary.
     * @param {string | ILocator} element located by accessible id, xpath,... locator
     * @example
     * ```typescript
     *
     * let bound = await gondola.getElementBounds("~accessibleId");
     * let right = bound.left + bound.width;
     * let bottom = bound.top + bound.height;
     * ```
     */
    getElementBounds(element: string | ILocator): Promise<{
        left: number;
        top: number;
        width: number;
        height: number;
    }>;
    /**
     * Performs a swipe on an element.
     * @param {string | ILocator} element located by accessible id, xpath,... locator
     * @param {number} offsetX
     * @param {number} offsetY
     * @example
     * ```typescript
     *
     * await gondola.swipe("~accessibleId",0, -1000);
     * ```
     */
    swipe(element: string | ILocator, offsetX: number, offsetY: number): void;
    /**
     * Performs a swipe on the screen.
     * @param {number} startX
     * @param {number} startY
     * @param {number} offsetX
     * @param {number} offsetY
     * @example
     * ```typescript
     *
     * await gondola.swipeByCoordinates(0, 0, 0, 600);
     * ```
     */
    swipeByCoordinates(startX: number, startY: number, offsetX: number, offsetY: number): void;
    /**
     * Hides the device keyboard
     * @param {string} strategy (Optional) desired strategy to close keyboard (‘tapOutside’ or ‘pressKey’)
     * @param {string} key (Optional) desired key to use with strategy "pressKey"
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    hideDeviceKeyboard(strategy?: string, key?: string): void;
    /**
     * Gets device screen size
     * @example
     * ```typescript
     *
     * let screenSize = await gondola.getDeviceScreenSize();
     * ```
     */
    getDeviceScreenSize(): Promise<RectReturn>;
    /**
     * Gets a list of all available contexts
     * @example
     * ```typescript
     *
     * let allContext: string[] = await gondola.getAllContexts();
     * ```
     */
    getAllContexts(): Promise<string[]>;
    /**
     * Retrieves the current context
     * @example
     * ```typescript
     *
     * let currentContext: string = await gondola.getContext();
     * ```
     */
    getContext(): Promise<string>;
    /**
     * Switches to the specified context.
     * @example
     * ```typescript
     *
     * await gondola.switchToContext("NATIVE_APP");
     * ```
     */
    switchToContext(context: string): Promise<any>;
    /**
     * Executes a native mobile command.<br />
     * Reference: http://appium.io/docs/en/commands/mobile-command/.<br />
     * Security: https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md
     * @param {string} command command name
     * @param {(string | number | boolean | object | undefined)[]} args JSON serializable argument
     * @example
     * ```typescript
     * // get current app activity name
     * // full command: adb shell "dumpsys window windows | grep -E 'mCurrentFocus|mFocusedApp'"
     * await gondola.runOnAndroid(async () => {
     *     const currentAppInfo = await gondola.executeCommand("mobile:shell", [{
     *         command: "dumpsys",
     *         args: [
     *             "window",
     *             "windows",
     *             "|",
     *             "grep",
     *             "-E",
     *             "'mCurrentFocus|mFocusedApp'",
     *         ],
     *     }]);
     *     console.log(currentAppInfo);
     * });
     *
     * // get battery info on iOS
     * await gondola.runOnIOS(async () => {
     *     const batteryInfo = await gondola.executeCommand("mobile:batteryInfo", []);
     *     console.log(batteryInfo);
     * });
     * ```
     */
    executeCommand(command: string, args?: Array<string | object | number | boolean | undefined>): Promise<any>;
    /**
     * Scrolls element into view.
     * **&#62; Support context "WEBVIEW" only**
     * @param {string|ILocator} element located by label|name|CSS|XPath|strict locator.
     * @example
     * ```typescript
     *
     * await gondola.scrollIntoView({xpath: "//a"}});
     * ```
     */
    scrollIntoView(element: string | ILocator): Promise<void>;
    /**
     * Select scroll picker Item
     * @param element
     * @param value
     * @param pickCompletedElement
     *
     * @example
     * ```typescript
     * // single item: pickerElement will be: day/ month/ year which are children controls of picker
     * await gondola.setPickerValue(pickerElement, "item name");
     *
     * // multiple items: pickerElement will be picker control, not include any child
     * await gondola.setPickerValue(pickerElement, ["one", "two", "three"]);
     *
     * // multiple items which contain undefined item: that means this item will not change
     * // and pickerElement will be picker control, not include any child
     * await gondola.setPickerValue(pickerElement, ["one", undefined, "three"]);
     *
     * ```
     */
    setPickerValue(element: string | ILocator, value: string | Array<string | undefined>, pickCompletedElement?: string | ILocator): Promise<void>;
}
/**
 * Set of actions to interact with Rest API endpoints supported by Gondola
 * @experimental v1
 * &#62; Can be changed or removed soon
 */
export interface IRestApi {
    /**
     * Sets the timeout for the request.
     * @param {number} newTimeout timeout in milliseconds
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    setRequestTimeout(newTimeout: number): void;
    /**
     * Sends a GET request.
     * @param url {string} endpoint address
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendGetRequest(url: string, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Sends a POST request.
     * @param url {string} endpoint address
     * @param payload {any} the request body
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendPostRequest(url: string, payload: {}, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Sends a PATCH request.
     * @param url {string} endpoint address
     * @param payload {any} the request body
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendPatchRequest(url: string, payload: {}, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Sends a PUT request.
     * @param url {string} endpoint address
     * @param payload {any} the request body
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendPutRequest(url: string, payload: {}, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Sends a DELETE request.
     * @param url {string} endpoint address
     * @param payload {any} the request body
     * @param headers {any} header parameters
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    sendDeleteRequest(url: string, headers: {}): Promise<{
        status: number;
        header: any;
        body: any;
    }>;
    /**
     * Parses response data.
     * @param response {any} data response from server
     * @param expected {number} expected status value
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    checkResponseStatus(response: any, expected: number): void;
}
/**
 * Helper for resemble.js, used for image comparison in tests supported by Gondola.
 * @experimental v1
 * &#62; Can be changed or removed soon
 */
export interface IResemble {
    /**
     * See the Visual Difference between the Base Image and a Screenshot Image
     * @param baseImage {string} Name of the Base Image (Base Image path is taken from Configuration)
     * @param options {any} Options ex {prepareBaseImage: true, tolerance: 5} along with Resemble JS Options,
     * read more here: https://github.com/rsmbl/Resemble.js
     * @returns {Promise<any>}
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    seeVisualDiff(baseImage: string, options: any): any;
    /**
     * See the Visual Diff for an Element on a Page.
     * @param selector {string} Selector which has to be compared, CSS|XPath|ID
     * @param baseImage {string} Base Image for comparison
     * @param options {any} Options ex {prepareBaseImage: true, tolerance: 5} along with Resemble JS Options,
     * read more here: https://github.com/rsmbl/Resemble.js
     * @returns {Promise<any>}
     * @experimental v1
     * &#62; Can be changed or removed soon
     */
    seeVisualDiffForElement(selector: string | ILocator, baseImage: string, options: any): any;
}
