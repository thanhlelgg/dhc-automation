export interface ITestItem {
    id: number;
    title: string;
    type: TestTypes;
    status: Status;
    startTime?: any;
    endTime?: any;
    parent?: ISuite;
}
export interface ISpec extends ITestItem {
    messages: IMessage[];
    keywordSteps: IKeywordStep[];
    err?: any;
    screenshot?: any;
}
export interface ISuite extends ITestItem {
    suites: ISuite[];
    specs: ISpec[];
    items: ITestItem[];
    skipped: number;
    failures: number;
    passes: number;
}
export interface IMessage {
    type: MsgTypes;
    msg?: string;
    pic?: any;
    failDetail?: any;
    status: Status;
}
export interface IKeywordStep {
    id: number;
    keyword: string;
    args: any[];
    actions: string;
    stepDuration: string;
}
export declare enum TestTypes {
    Suite = 0,
    Spec = 1
}
export declare enum MsgTypes {
    Empty = 0,
    Text = 1,
    Picture = 2
}
export declare enum Status {
    Unkown = 0,
    Passed = 1,
    Failed = 2,
    Error = 3,
    Pending = 4
}
/**
 * This configuration class predefined some configs for Helium report
 * @property {string} mapSuite
 * @property {string} mapSpec
 * @property {boolean} captureScreenOnPassed
 * @property {string} htmlResultPath
 */
export declare class ReporterOptions {
    /** This value will be displayed on the result to stand for a suite
     * @type {string}
     * @default "Test Suite"
     */
    mapSuite?: string;
    autoOpen?: boolean;
    /**
     * This value will be displayed on the result to stand for a spec
     * @type {string}
     * @default "Test Case"
     */
    mapSpec?: string;
    /**
     * Turns on/off function capture screen at the end of passed spec
     * @type {boolean}
     * @default false
     */
    captureScreenOnPassed?: boolean;
    /**
     * Turns on/off function capture screen at the end of failed spec
     * @type {boolean}
     * @default false
     */
    captureScreenOnFailed?: boolean;
    /**
     * Specify path for Helium to write the report
     * @type {string}
     * @default [CURRENT_WORKING_DIR]/report.html
     */
    htmlResultPath?: string;
    /**
     * Stop all remaining tests in the current suite (describe)
     * right after a failed test occur
     * @type {boolean}
     * @default true
     */
    stopDescribeOnTheFirstFailure?: boolean;
    /**
     * Stop all remaining tests right after a failed test occur
     * @type {boolean}
     * @default false
     */
    stopRunOnTheFirstFailure?: boolean;
    /**
     * Skip spec that has the name match with this given wildcard
     * @type {string}
     * @default undefined
     */
    skipSpec?: string;
    /**
     * Skip suite that has the name match with this given wildcard
     * @type {string}
     * @default undefined
     */
    skipSuite?: string;
}
