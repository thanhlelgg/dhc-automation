import { IResemble } from "../builtin";
export declare class ResembleHelper extends Helper implements IResemble {
    private config;
    constructor(config: any);
    /**
     * Compare Images
     * @param image1
     * @param image2
     * @param diffImage
     * @param options
     * @returns {Promise<any | never>}
     */
    _compareImages(image1: string, image2: string, diffImage: string, options: any): Promise<unknown>;
    /**
     *
     * @param image1
     * @param options
     * @returns {Promise<*>}
     */
    _fetchMisMatchPercentage(image1: string, options: any): Promise<any>;
    /**
     * Check Visual Difference for Base and Screenshot Image
     * @param baseImage         Name of the Base Image (Base Image path is taken from Configuration)
     * @param options           Options ex {prepareBaseImage: true, tolerance: 5} along with Resemble JS Options,
     * read more here: https://github.com/rsmbl/Resemble.js
     * @returns {Promise<void>}
     */
    seeVisualDiff(baseImage: string, options: any): Promise<void>;
    /**
     * See Visual Diff for an Element on a Page
     *
     * @param selector   Selector which has to be compared expects these -> CSS|XPath|ID
     * @param baseImage  Base Image for comparison
     * @param options    Options ex {prepareBaseImage: true, tolerance: 5} along with Resemble JS Options,
     * read more here: https://github.com/rsmbl/Resemble.js
     * @returns {Promise<void>}
     */
    seeVisualDiffForElement(selector: string | ILocator, baseImage: string, options: any): Promise<null | undefined>;
    /**
     * Function to prepare Base Images from Screenshots
     *
     * @param screenShotImage  Name of the screenshot Image (Screenshot Image Path is taken from Configuration)
     */
    _prepareBaseImage(screenShotImage: string): Promise<void>;
    /**
     * Function to create Directory
     * @param directory
     * @returns {Promise<void>}
     * @private
     */
    _createDir(directory: string): Promise<void>;
    /**
     * Function to fetch Bounding box for an element, fetched using selector
     *
     * @param selector CSS|XPath|ID selector
     * @returns {Promise<{boundingBox: {left: *, top: *, right: *, bottom: *}}>}
     */
    _getBoundingBox(selector: string | ILocator): Promise<{
        left: any;
        top: any;
        right: any;
        bottom: any;
    }>;
    _getBrowser(): any;
}
